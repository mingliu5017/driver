From 4adeb723104ebd0971c0f9c49b805ad71518de96 Mon Sep 17 00:00:00 2001
From: Weiguang Ruan <Weiguang.ruan@amlogic.com>
Date: Fri, 23 Nov 2018 17:48:14 +0800
Subject: [PATCH] wifi: add qca9377 wifi support in S42wifi/multiwiifi/web_ui [2/3]

PD#SH-23

Problem:
the code style in aml_util/src/multi_wifi_load_driver.c
is chaotic

Solution:
fix code style

Verify:
s400

Change-Id: I7cb43b3e3ea1394c90947174264c59a7121f757d
Signed-off-by: Weiguang Ruan <Weiguang.ruan@amlogic.com>
---

diff --git a/package/aml_util/src/multi_wifi_load_driver.c b/package/aml_util/src/multi_wifi_load_driver.c
index 66245e7..7f0dc37 100644
--- a/package/aml_util/src/multi_wifi_load_driver.c
+++ b/package/aml_util/src/multi_wifi_load_driver.c
@@ -64,29 +64,29 @@
 #endif
 
 typedef struct config_arg {
-    const int arg_type;
-    const char *firmware_path;
-    const char *firmware_ap_path;
-    const char *nvram_path;
-    const char *ifname;
-    const char *if2name;
-    const char *stacfgpath;
-    const char *arg;
+	const int arg_type;
+	const char *firmware_path;
+	const char *firmware_ap_path;
+	const char *nvram_path;
+	const char *ifname;
+	const char *if2name;
+	const char *stacfgpath;
+	const char *arg;
 } module_arg;
 
 typedef struct load_info {
-    const char *chip_id;
-    const char *wifi_module_name;
-    const char *wifi_module_filename;
-    const char *wifi_module_path;
+	const char *chip_id;
+	const char *wifi_module_name;
+	const char *wifi_module_filename;
+	const char *wifi_module_path;
 
-    const module_arg wifi_module_arg;
-    const char *wifi_name;
-    const int wifi_pid;
+	const module_arg wifi_module_arg;
+	const char *wifi_name;
+	const int wifi_pid;
 
-    const char *wifi_module_name2;
-    const char *wifi_module_filename2;
-    const char *wifi_module_arg2;
+	const char *wifi_module_name2;
+	const char *wifi_module_filename2;
+	const char *wifi_module_arg2;
 } dongle_info;
 
 #define TYPE_AP         0
@@ -95,33 +95,33 @@
 static int type = TYPE_AP;
 
 static const dongle_info dongle_registerd[] = {
-    {
-	"a962",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type       = MODULE_ARG_FIRMWARE,
-	    .firmware_path  = "40181/fw_bcm40181a2.bin",
-	    .firmware_ap_path  = "40181/fw_bcm40181a2_apsta.bin",
-	    .nvram_path     = "40181/nvram.txt",
-	},
-	"bcm6210",
-	0x0
+	{
+		"a962",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "40181/fw_bcm40181a2.bin",
+			.firmware_ap_path  = "40181/fw_bcm40181a2_apsta.bin",
+			.nvram_path     = "40181/nvram.txt",
+		},
+		"bcm6210",
+		0x0
 	},
 	{
-	"4359",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-		.arg_type       = MODULE_ARG_FIRMWARE,
-		.firmware_path  = "AP6398/fw_bcm4359c0_ag.bin",
-		.firmware_ap_path  = "AP6398/fw_bcm4359c0_ag_apsta.bin",
-		.nvram_path     = "AP6398/nvram.txt",
-	},
-	"ap6398",
-	0x0
+		"4359",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "AP6398/fw_bcm4359c0_ag.bin",
+			.firmware_ap_path  = "AP6398/fw_bcm4359c0_ag_apsta.bin",
+			.nvram_path     = "AP6398/nvram.txt",
+		},
+		"ap6398",
+		0x0
 	},
 	{
 		"4354",
@@ -137,153 +137,153 @@
 		"bcm4354",
 		0x0
 	},
-    {
-	"4335",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type       = MODULE_ARG_FIRMWARE,
-	    .firmware_path  = "6335/fw_bcm4339a0_ag.bin",
-	    .firmware_ap_path  = "6335/fw_bcm4339a0_ag_apsta.bin",
-	    .nvram_path     = "6335/nvram.txt",
-	},
-	"bcm6335",
-	0x0
-    },
-    {
-	"a94d",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type       = MODULE_ARG_FIRMWARE,
-	    .firmware_path  = "6234/fw_bcm43341b0_ag.bin",
-	    .firmware_ap_path  = "6234/fw_bcm43341b0_ag_apsta.bin",
-	    .nvram_path     = "6234/nvram.txt",
-	},
-	"bcm6234",
-	0x0
-    },
-    {
-	"a9bf",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type       = MODULE_ARG_FIRMWARE,
-	    .firmware_path  = "6255/fw_bcm43455c0_ag.bin",
-	    .firmware_ap_path  = "6255/fw_bcm43455c0_ag_apsta.bin",
-	    .nvram_path     = "6255/nvram.txt",
-	},
-	"bcm6255",
-	0x0
-    },
-    {
-	"a9a6",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type       = MODULE_ARG_FIRMWARE,
-	    .firmware_path  = "6212/fw_bcm43438a0.bin",
-	    .firmware_ap_path  = "6212/fw_bcm43438a0_apsta.bin",
-	    .nvram_path     = "6212/nvram.txt",
-	},
-	"bcm6212",
-	0x0
-    },
-    {
-	"4356",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type       = MODULE_ARG_FIRMWARE,
-	    .firmware_path  = "4356/fw_bcm4356a2_ag.bin",
-	    .firmware_ap_path  = "4356/fw_bcm4356a2_ag_apsta.bin",
-	    .nvram_path     = "4356/nvram.txt",
-	},
-	"bcm6356",
-	0x0
-    },
-    {
-	"aa31",
-	"dhd",
-	"dhd.ko",
-	BROADCOM_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type       = MODULE_ARG_FIRMWARE,
-	    .firmware_path  = "4358/fw_bcm4358_ag.bin",
-	    .firmware_ap_path  = "4358/fw_bcm4358_ag_apsta.bin",
-	    .nvram_path     = "4358/nvram.txt",
-	},
-	"bcm4358",
-	0x0
-    },
-    {
-	"8179",
-	"8189es",
-	"8189es.ko",
-	REALTEK_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type   = MODULE_ARG_IFNAME,
-	    .ifname     = "wlan0",
-	    .if2name    = "p2p0",
-	},
-	"rtl8189es",
-	0x0
-    },
-    {
-    "d723",
-    "8723ds",
-    "8723ds.ko",
-    REALTEK_KO_PATH,
-    .wifi_module_arg = {
-        .arg_type   = MODULE_ARG_IFNAME,
-        .ifname     = "wlan0",
-        .if2name    = "p2p0",
-    },
-    "rtl8723ds",
-    0x0
-    },
-    {
-	"b822",
-	"8822bs",
-	"8822bs.ko",
-	REALTEK_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type   = MODULE_ARG_IFNAME,
-	    .ifname     = "wlan0",
-	    .if2name    = "p2p0",
-	},
-	"rtl8822bs",
-	0x0
+	{
+		"4335",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "6335/fw_bcm4339a0_ag.bin",
+			.firmware_ap_path  = "6335/fw_bcm4339a0_ag_apsta.bin",
+			.nvram_path     = "6335/nvram.txt",
+		},
+		"bcm6335",
+		0x0
 	},
 	{
-	"invalid",
-	"8822bu",
-	"8822bu.ko",
-	REALTEK_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type   = MODULE_ARG_IFNAME,
-	    .ifname     = "wlan0",
-	    .if2name    = "p2p0",
+		"a94d",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "6234/fw_bcm43341b0_ag.bin",
+			.firmware_ap_path  = "6234/fw_bcm43341b0_ag_apsta.bin",
+			.nvram_path     = "6234/nvram.txt",
+		},
+		"bcm6234",
+		0x0
 	},
-	"rtl8822bu",
-	0xb82c
-    },
-    {
-	"3030",
-	"ssv6051",
-	"ssv6051.ko",
-	DEFAULT_KO_PATH,
-	.wifi_module_arg = {
-	    .arg_type   = MODULE_ARG_STACFG,
-	    .stacfgpath = "/system/vendor/etc/wifi/ssv6051/ssv6051-wifi.cfg",
+	{
+		"a9bf",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "6255/fw_bcm43455c0_ag.bin",
+			.firmware_ap_path  = "6255/fw_bcm43455c0_ag_apsta.bin",
+			.nvram_path     = "6255/nvram.txt",
+		},
+		"bcm6255",
+		0x0
 	},
-	"ssv6051",
-	0x0
+	{
+		"a9a6",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "6212/fw_bcm43438a0.bin",
+			.firmware_ap_path  = "6212/fw_bcm43438a0_apsta.bin",
+			.nvram_path     = "6212/nvram.txt",
+		},
+		"bcm6212",
+		0x0
+	},
+	{
+		"4356",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "4356/fw_bcm4356a2_ag.bin",
+			.firmware_ap_path  = "4356/fw_bcm4356a2_ag_apsta.bin",
+			.nvram_path     = "4356/nvram.txt",
+		},
+		"bcm6356",
+		0x0
+	},
+	{
+		"aa31",
+		"dhd",
+		"dhd.ko",
+		BROADCOM_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type       = MODULE_ARG_FIRMWARE,
+			.firmware_path  = "4358/fw_bcm4358_ag.bin",
+			.firmware_ap_path  = "4358/fw_bcm4358_ag_apsta.bin",
+			.nvram_path     = "4358/nvram.txt",
+		},
+		"bcm4358",
+		0x0
+	},
+	{
+		"8179",
+		"8189es",
+		"8189es.ko",
+		REALTEK_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type   = MODULE_ARG_IFNAME,
+			.ifname     = "wlan0",
+			.if2name    = "p2p0",
+		},
+		"rtl8189es",
+		0x0
+	},
+	{
+		"d723",
+		"8723ds",
+		"8723ds.ko",
+		REALTEK_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type   = MODULE_ARG_IFNAME,
+			.ifname     = "wlan0",
+			.if2name    = "p2p0",
+		},
+		"rtl8723ds",
+		0x0
+	},
+	{
+		"b822",
+		"8822bs",
+		"8822bs.ko",
+		REALTEK_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type   = MODULE_ARG_IFNAME,
+			.ifname     = "wlan0",
+			.if2name    = "p2p0",
+		},
+		"rtl8822bs",
+		0x0
+	},
+	{
+		"invalid",
+		"8822bu",
+		"8822bu.ko",
+		REALTEK_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type   = MODULE_ARG_IFNAME,
+			.ifname     = "wlan0",
+			.if2name    = "p2p0",
+		},
+		"rtl8822bu",
+		0xb82c
+	},
+	{
+		"3030",
+		"ssv6051",
+		"ssv6051.ko",
+		DEFAULT_KO_PATH,
+		.wifi_module_arg = {
+			.arg_type   = MODULE_ARG_STACFG,
+			.stacfgpath = "/system/vendor/etc/wifi/ssv6051/ssv6051-wifi.cfg",
+		},
+		"ssv6051",
+		0x0
 	},
 	{
 		"9145",
@@ -329,28 +329,28 @@
 
 static void get_module_arg(const module_arg *arg, char *str, int type)
 {
-    switch (arg->arg_type) {
-    case MODULE_ARG_FIRMWARE: {
-	if (type == TYPE_AP)
-		sprintf(str, "firmware_path=%s/%s nvram_path=%s/%s", BROADCOM_FIRMWARE_PATH, arg->firmware_ap_path, BROADCOM_FIRMWARE_PATH, arg->nvram_path);
-	else
-		sprintf(str, "firmware_path=%s/%s nvram_path=%s/%s", BROADCOM_FIRMWARE_PATH, arg->firmware_path, BROADCOM_FIRMWARE_PATH, arg->nvram_path);
-	break;
-    }
-    case MODULE_ARG_IFNAME: {
-	sprintf(str, "ifname=%s if2name=%s", arg->ifname, arg->if2name);
-	break;
-    }
-    case MODULE_ARG_STACFG: {
-	sprintf(str, "stacfgpath=%s", arg->stacfgpath);
-	break;
+	switch (arg->arg_type) {
+	case MODULE_ARG_FIRMWARE: {
+		if (type == TYPE_AP)
+			sprintf(str, "firmware_path=%s/%s nvram_path=%s/%s", BROADCOM_FIRMWARE_PATH, arg->firmware_ap_path, BROADCOM_FIRMWARE_PATH, arg->nvram_path);
+		else
+			sprintf(str, "firmware_path=%s/%s nvram_path=%s/%s", BROADCOM_FIRMWARE_PATH, arg->firmware_path, BROADCOM_FIRMWARE_PATH, arg->nvram_path);
+		break;
+	}
+	case MODULE_ARG_IFNAME: {
+		sprintf(str, "ifname=%s if2name=%s", arg->ifname, arg->if2name);
+		break;
+	}
+	case MODULE_ARG_STACFG: {
+		sprintf(str, "stacfgpath=%s", arg->stacfgpath);
+		break;
 	}
 	case MODULE_ARG_OTHER: {
-	sprintf(str, "%s", arg->arg);
-	break;
+		sprintf(str, "%s", arg->arg);
+		break;
 	}
 	default:
-	break;
+		break;
 	}
 }
 
@@ -389,303 +389,303 @@
 
 static int rmmod(const char *modname)
 {
-    int ret = -1;
-    int maxtry = 10;
+	int ret = -1;
+	int maxtry = 10;
 
-    fprintf(stderr, "[%s:%d]module(%s)\n", __func__, __LINE__, modname);
-    while (maxtry-- > 0) {
-	ret = syscall(__NR_delete_module, modname, O_NONBLOCK | O_EXCL);
-	if (ret < 0 && errno == EAGAIN)
-	    usleep(500000);
-	else
-	break;
-    }
+	fprintf(stderr, "[%s:%d]module(%s)\n", __func__, __LINE__, modname);
+	while (maxtry-- > 0) {
+		ret = syscall(__NR_delete_module, modname, O_NONBLOCK | O_EXCL);
+		if (ret < 0 && errno == EAGAIN)
+			usleep(500000);
+		else
+			break;
+	}
 
-    if (ret != 0)
-	fprintf(stderr, "rmmod: unload driver module (%s) failed\n", modname);
+	if (ret != 0)
+		fprintf(stderr, "rmmod: unload driver module (%s) failed\n", modname);
 
-    return ret;
+	return ret;
 }
 
 static void set_wifi_power(int power)
 {
-    int fd;
+	int fd;
 
-    fd = open("/dev/wifi_power", O_RDWR);
-    if (fd != -1) {
-	switch (power) {
-	case USB_POWER_UP: {
-		if (ioctl(fd, USB_POWER_UP) < 0) {
-		    fprintf(stderr, "Set usb Wi-Fi power up error!\n");
+	fd = open("/dev/wifi_power", O_RDWR);
+	if (fd != -1) {
+		switch (power) {
+		case USB_POWER_UP: {
+			if (ioctl(fd, USB_POWER_UP) < 0) {
+				fprintf(stderr, "Set usb Wi-Fi power up error!\n");
+			}
+			break;
 		}
-		break;
-	}
-	case USB_POWER_DOWN: {
-		if (ioctl(fd, USB_POWER_DOWN) < 0) {
-		    fprintf(stderr, "Set usb Wi-Fi power down error!\n");
+		case USB_POWER_DOWN: {
+			if (ioctl(fd, USB_POWER_DOWN) < 0) {
+				fprintf(stderr, "Set usb Wi-Fi power down error!\n");
+			}
+			break;
 		}
-		break;
-	}
-	case SDIO_POWER_UP: {
-		if (ioctl(fd, SDIO_POWER_UP) < 0) {
-		    fprintf(stderr, "Set SDIO Wi-Fi power up error!\n");
+		case SDIO_POWER_UP: {
+			if (ioctl(fd, SDIO_POWER_UP) < 0) {
+				fprintf(stderr, "Set SDIO Wi-Fi power up error!\n");
+			}
+			break;
 		}
-		break;
-	}
-	case SDIO_POWER_DOWN: {
-		if (ioctl(fd, SDIO_POWER_DOWN) < 0) {
-		    fprintf(stderr, "Set SDIO Wi-Fi power down error!\n");
+		case SDIO_POWER_DOWN: {
+			if (ioctl(fd, SDIO_POWER_DOWN) < 0) {
+				fprintf(stderr, "Set SDIO Wi-Fi power down error!\n");
+			}
+			break;
 		}
-		break;
+		default:
+			break;
+		}
+	} else {
+		fprintf(stderr, "device /dev/wifi_power open failed\n");
 	}
-	default:
-		break;
-	}
-    } else {
-	fprintf(stderr, "device /dev/wifi_power open failed\n");
-    }
-    close(fd);
+	close(fd);
 
-    return;
+	return;
 }
 
 static int get_wifi_dev_type(char *dev_type)
 {
-    int fd;
+	int fd;
 
-    fd = open("/dev/wifi_power", O_RDWR);
-    if (fd < 0) {
-       return -1;
-    }
+	fd = open("/dev/wifi_power", O_RDWR);
+	if (fd < 0) {
+		return -1;
+	}
 
-    if (ioctl(fd, SDIO_GET_DEV_TYPE, dev_type) < 0) {
+	if (ioctl(fd, SDIO_GET_DEV_TYPE, dev_type) < 0) {
+		close(fd);
+
+		return -1;
+	}
 	close(fd);
 
-	return -1;
-    }
-    close(fd);
-
-    return 0;
+	return 0;
 }
 
 static int print_devs(libusb_device **devs, int type)
 {
-    libusb_device *dev;
-    int i = 0, j;
-    char module_path[128] = {'\0'};
-    char module_arg[256] = {'\0'};
+	libusb_device *dev;
+	int i = 0, j;
+	char module_path[128] = {'\0'};
+	char module_arg[256] = {'\0'};
 
-    while ((dev = devs[i++]) != NULL) {
-	struct libusb_device_descriptor desc;
-	int r = libusb_get_device_descriptor(dev, &desc);
+	while ((dev = devs[i++]) != NULL) {
+		struct libusb_device_descriptor desc;
+		int r = libusb_get_device_descriptor(dev, &desc);
 
-	if (r < 0) {
-	    fprintf(stderr, "failed to get device descriptor\n");
+		if (r < 0) {
+			fprintf(stderr, "failed to get device descriptor\n");
+
+			return -1;
+		}
+
+		for (j = 0; j < (int)(ARRAY_SIZE(dongle_registerd)); j++) {
+			if (dongle_registerd[j].wifi_pid == desc.idProduct) {
+				load_dongle_index = j;
+				fprintf(stderr, "found the match wifi is: %s", dongle_registerd[j].wifi_name);
+				memset(module_path, 0, sizeof(module_path));
+				memset(module_arg, 0, sizeof(module_arg));
+				sprintf(module_path, "%s/%s", dongle_registerd[i].wifi_module_path, dongle_registerd[i].wifi_module_filename);
+				get_module_arg(&dongle_registerd[i].wifi_module_arg, module_arg, type);
+				fprintf(stderr, "[%s:%d]module_path(%s)\n", __func__, __LINE__, module_path);
+				fprintf(stderr, "[%s:%d]module_arg(%s)\n", __func__, __LINE__, module_arg);
+				insmod(module_path, module_arg);
+
+				return 0;
+			}
+		}
+	}
 
 	return -1;
-	}
-
-	for (j = 0; j < (int)(ARRAY_SIZE(dongle_registerd)); j++) {
-	if (dongle_registerd[j].wifi_pid == desc.idProduct) {
-		load_dongle_index = j;
-		fprintf(stderr, "found the match wifi is: %s", dongle_registerd[j].wifi_name);
-		memset(module_path, 0, sizeof(module_path));
-		memset(module_arg, 0, sizeof(module_arg));
-		sprintf(module_path, "%s/%s", dongle_registerd[i].wifi_module_path, dongle_registerd[i].wifi_module_filename);
-		get_module_arg(&dongle_registerd[i].wifi_module_arg, module_arg, type);
-		fprintf(stderr, "[%s:%d]module_path(%s)\n", __func__, __LINE__, module_path);
-		fprintf(stderr, "[%s:%d]module_arg(%s)\n", __func__, __LINE__, module_arg);
-		insmod(module_path, module_arg);
-
-		return 0;
-	}
-	}
-    }
-
-    return -1;
 }
 
 static int usb_wifi_load_driver(int type)
 {
-    libusb_device **devs;
-    int r;
-    ssize_t cnt;
+	libusb_device **devs;
+	int r;
+	ssize_t cnt;
 
-    r = libusb_init(NULL);
-    if (r < 0)
-	return r;
+	r = libusb_init(NULL);
+	if (r < 0)
+		return r;
 
-    cnt = libusb_get_device_list(NULL, &devs);
-    if (cnt < 0)
-	return (int)cnt;
+	cnt = libusb_get_device_list(NULL, &devs);
+	if (cnt < 0)
+		return (int)cnt;
 
-    r = print_devs(devs, type);
-    if (r < 0)
-	return r;
+	r = print_devs(devs, type);
+	if (r < 0)
+		return r;
 
-    libusb_free_device_list(devs, 1);
-    libusb_exit(NULL);
+	libusb_free_device_list(devs, 1);
+	libusb_exit(NULL);
 
-    return 0;
+	return 0;
 }
 
 static int sdio_wifi_load_driver(int type)
 {
-    int i;
-    char sdio_buf[128];
-    char module_path[128] = {'\0'};
-    char module_arg[256] = {'\0'};
-    FILE *fp = fopen(file_name, "r");
+	int i;
+	char sdio_buf[128];
+	char module_path[128] = {'\0'};
+	char module_arg[256] = {'\0'};
+	FILE *fp = fopen(file_name, "r");
 
-    if (!fp) {
-	fprintf(stderr, "open sdio wifi file failed\n");
+	if (!fp) {
+		fprintf(stderr, "open sdio wifi file failed\n");
 
-	return -1;
-    }
+		return -1;
+	}
 
-    memset(sdio_buf, 0, sizeof(sdio_buf));
-    if (fread(sdio_buf, 1, 128, fp) < 1) {
+	memset(sdio_buf, 0, sizeof(sdio_buf));
+	if (fread(sdio_buf, 1, 128, fp) < 1) {
+		fclose(fp);
+
+		return -1;
+	}
+
 	fclose(fp);
-
-	return -1;
-    }
-
-    fclose(fp);
-    for (i = 0; i < (int)(ARRAY_SIZE(dongle_registerd)); i++) {
-	if (strstr(sdio_buf, dongle_registerd[i].chip_id)) {
-	    load_dongle_index = i;
-	    fprintf(stderr, "found the match wifi is: %s\n", dongle_registerd[i].wifi_name);
-	    memset(module_path, 0, sizeof(module_path));
-	    memset(module_arg, 0, sizeof(module_arg));
-	    sprintf(module_path, "%s/%s", dongle_registerd[i].wifi_module_path, dongle_registerd[i].wifi_module_filename);
-	    get_module_arg(&dongle_registerd[i].wifi_module_arg, module_arg, type);
-	    fprintf(stderr, "[%s:%d]module_path(%s)\n", __func__, __LINE__, module_path);
-	    fprintf(stderr, "[%s:%d]module_arg(%s)\n", __func__, __LINE__, module_arg);
-	    insmod(module_path, module_arg);
-
-		if (dongle_registerd[i].wifi_module_name2) {
+	for (i = 0; i < (int)(ARRAY_SIZE(dongle_registerd)); i++) {
+		if (strstr(sdio_buf, dongle_registerd[i].chip_id)) {
+			load_dongle_index = i;
+			fprintf(stderr, "found the match wifi is: %s\n", dongle_registerd[i].wifi_name);
 			memset(module_path, 0, sizeof(module_path));
 			memset(module_arg, 0, sizeof(module_arg));
-			memcpy(module_arg, dongle_registerd[i].wifi_module_arg2, strlen(dongle_registerd[i].wifi_module_arg2));
-			sprintf(module_path, "%s/%s", dongle_registerd[i].wifi_module_path, dongle_registerd[i].wifi_module_filename2);
-			fprintf(stderr, "[%s:%d]module_path2(%s)\n", __func__, __LINE__, module_path);
-			fprintf(stderr, "[%s:%d]module_arg2(%s)\n", __func__, __LINE__, module_arg);
+			sprintf(module_path, "%s/%s", dongle_registerd[i].wifi_module_path, dongle_registerd[i].wifi_module_filename);
+			get_module_arg(&dongle_registerd[i].wifi_module_arg, module_arg, type);
+			fprintf(stderr, "[%s:%d]module_path(%s)\n", __func__, __LINE__, module_path);
+			fprintf(stderr, "[%s:%d]module_arg(%s)\n", __func__, __LINE__, module_arg);
 			insmod(module_path, module_arg);
+
+			if (dongle_registerd[i].wifi_module_name2) {
+				memset(module_path, 0, sizeof(module_path));
+				memset(module_arg, 0, sizeof(module_arg));
+				memcpy(module_arg, dongle_registerd[i].wifi_module_arg2, strlen(dongle_registerd[i].wifi_module_arg2));
+				sprintf(module_path, "%s/%s", dongle_registerd[i].wifi_module_path, dongle_registerd[i].wifi_module_filename2);
+				fprintf(stderr, "[%s:%d]module_path2(%s)\n", __func__, __LINE__, module_path);
+				fprintf(stderr, "[%s:%d]module_arg2(%s)\n", __func__, __LINE__, module_arg);
+				insmod(module_path, module_arg);
+			}
+
+			return 0;
 		}
-
-	return 0;
 	}
-    }
 
-    return -1;
+	return -1;
 }
 
 static int multi_wifi_load_driver(int type)
 {
-    int wait_time = 0, ret;
-    char dev_type[10] = {'\0'};
+	int wait_time = 0, ret;
+	char dev_type[10] = {'\0'};
 
-    get_wifi_dev_type(dev_type);
-    sprintf(file_name, "/sys/bus/mmc/devices/%s:0001/%s:0001:1/device", dev_type, dev_type);
-    if (!sdio_wifi_load_driver(type)) {
-	return 0;
-    }
-	fprintf(stderr, "wait usb ok\n");
-    do {
-	ret = usb_wifi_load_driver(type);
-	if (!ret)
-	return 0;
-	else if (ret > 0)
-	break;
-	else {
-	    wait_time++;
-	    usleep(50000);
+	get_wifi_dev_type(dev_type);
+	sprintf(file_name, "/sys/bus/mmc/devices/%s:0001/%s:0001:1/device", dev_type, dev_type);
+	if (!sdio_wifi_load_driver(type)) {
+		return 0;
 	}
-    } while (wait_time < 300);
+	fprintf(stderr, "wait usb ok\n");
+	do {
+		ret = usb_wifi_load_driver(type);
+		if (!ret)
+			return 0;
+		else if (ret > 0)
+			break;
+		else {
+			wait_time++;
+			usleep(50000);
+		}
+	} while (wait_time < 300);
 
-    return -1;
+	return -1;
 }
 
 static int wifi_on(int type)
 {
-    set_wifi_power(SDIO_POWER_UP);
-    if (multi_wifi_load_driver(type) < 0) {
-	set_wifi_power(SDIO_POWER_DOWN);
+	set_wifi_power(SDIO_POWER_UP);
+	if (multi_wifi_load_driver(type) < 0) {
+		set_wifi_power(SDIO_POWER_DOWN);
 
-	return -1;
-    }
+		return -1;
+	}
 
-    return 0;
+	return 0;
 }
 
 static int wifi_off(void)
 {
-    int i;
-    char dev_type[10] = {'\0'};
-    char sdio_buf[128];
+	int i;
+	char dev_type[10] = {'\0'};
+	char sdio_buf[128];
 
-    get_wifi_dev_type(dev_type);
-    sprintf(file_name, "/sys/bus/mmc/devices/%s:0001/%s:0001:1/device", dev_type, dev_type);
-    FILE *fp = fopen(file_name, "r");
+	get_wifi_dev_type(dev_type);
+	sprintf(file_name, "/sys/bus/mmc/devices/%s:0001/%s:0001:1/device", dev_type, dev_type);
+	FILE *fp = fopen(file_name, "r");
 
-    if (!fp) {
-	fprintf(stderr, "open sdio wifi file failed\n");
+	if (!fp) {
+		fprintf(stderr, "open sdio wifi file failed\n");
 
-	return -1;
-    }
-
-    memset(sdio_buf, 0, sizeof(sdio_buf));
-    if (fread(sdio_buf, 1, 128, fp) < 1) {
-	fclose(fp);
-
-	return -1;
-    }
-
-    fclose(fp);
-    for (i = 0; i < (int)(ARRAY_SIZE(dongle_registerd)); i++) {
-	if (strstr(sdio_buf, dongle_registerd[i].chip_id)) {
-		    load_dongle_index = i;
-		break;
+		return -1;
 	}
-    }
 
-    usleep(200000); /* allow to finish interface down */
-    rmmod(dongle_registerd[load_dongle_index].wifi_module_name);
-    if (dongle_registerd[load_dongle_index].wifi_module_name2)
-        rmmod(dongle_registerd[load_dongle_index].wifi_module_name2);
-    usleep(500000);
-    set_wifi_power(SDIO_POWER_DOWN);
+	memset(sdio_buf, 0, sizeof(sdio_buf));
+	if (fread(sdio_buf, 1, 128, fp) < 1) {
+		fclose(fp);
 
-    return 0;
+		return -1;
+	}
+
+	fclose(fp);
+	for (i = 0; i < (int)(ARRAY_SIZE(dongle_registerd)); i++) {
+		if (strstr(sdio_buf, dongle_registerd[i].chip_id)) {
+			load_dongle_index = i;
+			break;
+		}
+	}
+
+	usleep(200000); /* allow to finish interface down */
+	rmmod(dongle_registerd[load_dongle_index].wifi_module_name);
+	if (dongle_registerd[load_dongle_index].wifi_module_name2)
+		rmmod(dongle_registerd[load_dongle_index].wifi_module_name2);
+	usleep(500000);
+	set_wifi_power(SDIO_POWER_DOWN);
+
+	return 0;
 }
 
 int main(int argc, char *argv[])
 {
-    long value = 0;
-    int fd;
+	long value = 0;
+	int fd;
 
-    fd = open("/dev/console", O_RDWR | O_NOCTTY | O_NONBLOCK);
-    if (fd != -1) {
-	dup2(fd, STDOUT_FILENO);
-	dup2(fd, STDERR_FILENO);
-	close(fd);
-    }
+	fd = open("/dev/console", O_RDWR | O_NOCTTY | O_NONBLOCK);
+	if (fd != -1) {
+		dup2(fd, STDOUT_FILENO);
+		dup2(fd, STDERR_FILENO);
+		close(fd);
+	}
 
-    if (argc != 3) {
-	fprintf(stderr, "wrong number of arguments\n");
-	return -1;
-    }
+	if (argc != 3) {
+		fprintf(stderr, "wrong number of arguments\n");
+		return -1;
+	}
 
-    if (!strncmp(argv[1], "ap", 2))
-	type = TYPE_AP;
-    else if (!strncmp(argv[1], "sta", 3))
-	type = TYPE_STATION;
+	if (!strncmp(argv[1], "ap", 2))
+		type = TYPE_AP;
+	else if (!strncmp(argv[1], "sta", 3))
+		type = TYPE_STATION;
 
-    value = strtol(argv[2], NULL, 10);
-    if (value == 1)
-	wifi_on(type);
-    else
-	wifi_off();
+	value = strtol(argv[2], NULL, 10);
+	if (value == 1)
+		wifi_on(type);
+	else
+		wifi_off();
 
-    return 0;
+	return 0;
 }
